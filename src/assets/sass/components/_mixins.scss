@mixin transition($transition) {
    -moz-transition:    $transition;
    -o-transition:      $transition;
    -webkit-transition: $transition;
    transition:         $transition;
}

@mixin transitionsGeneric($transition, $time){
    -moz-transition:    $transition $time;
    -o-transition:      $transition $time;
    -webkit-transition: $transition $time;
    transition:         $transition $time;
}

@mixin transitionSmooth($second){
    transition: all $second ease-in-out;
    -webkit-transition: all $second ease-in-out;    
    -moz-transition: all $second ease-in-out;
    -o-transition: all $second ease-in-out;
}

@mixin padding($top, $right, $bottom, $left) {
    padding-top: $top;
    padding-right: $right;
    padding-bottom: $bottom;
    padding-left: $left;
}

@mixin margin($top, $right, $bottom, $left) {
    padding-top: $top;
    padding-right: $right;
    padding-bottom: $bottom;
    padding-left: $left;
}

@mixin sombra(){
    box-shadow: 0 2px 10px rgba(17, 17, 17, 0.25);   
}

@mixin opacity(){
    opacity: 0.8;
    filter: alpha(opacity=80);
}

@mixin size($width, $height){
    width: $width;
    height: $height;
}

@mixin square($size){
    @include size($size, $size);
}

@mixin truncate($truncation-boundary) {
    max-width: $truncation-boundary;
    white-space: nowrap;
    overflow: hidden;
    text-overflow: ellipsis;
}

/*
	BEM
*/

@mixin element($name) {
  @at-root #{&}__#{$name} {
    @content;
  }
}

@mixin modifier($name) {
  @at-root #{&}--#{$name} {
    @content;
  }
}

@mixin clearfix() {
    &:before,
    &:after {
      content: " ";
      display: table;
    }
    &:after {
      clear: both;
    }
}

/*
    Centralize rapidamente qualquer elemento dentro de seu pai. Requer width ou max-width definido.
*/

@mixin center-block() {
    display: block;
    margin-left: auto;
    margin-right: auto;
}

/*
	Controla todos os Zindexs
*/
$z-indexes: (
    "outdated-browser",
    "modal",
    "site-header",
    "page-wrapper",
    "site-footer"
);
@function z($name) {
    @if index($z-indexes, $name) {
        @return (length($z-indexes) - index($z-indexes, $name)) + 1;
    } @else {
        @warn 'There is no item "#{$name}" in this list; choose one of: #{$z-indexes}';
        @return null;
    }
}


$breakpoints: (
    "phone":        400px,
    "phone-wide":   480px,
    "phablet":      560px,
    "tablet-small": 640px,
    "tablet":       768px,
    "tablet-wide":  1024px,
    "desktop":      1248px,
    "desktop-wide": 1440px
);
@mixin mq($width, $type: min) {
    @if map_has_key($breakpoints, $width) {
        $width: map_get($breakpoints, $width);
        @if $type == max {
            $width: $width - 1px;
        }
        @media only screen and (#{$type}-width: $width) {
            @content;
        }
    }

}